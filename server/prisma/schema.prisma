// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String
  email          String          @unique
  password       String
  role           String          @default("EDITOR") // SUPERUSER, TRANSLATOR, EDITOR
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  translations   Translation[]
  knowledgeBases KnowledgeBase[]
  prompts        Prompt[]
  sharedWithMe   TranslationShare[] @relation("shared_with")
  sharedByMe     TranslationShare[] @relation("shared_by")
}

model Translation {
  id              String         @id @default(cuid())
  fileName        String
  filePath        String
  fileSize        Int
  fileType        String
  originalName    String         @default("")
  sourceLanguage  String
  targetLanguage  String
  status          String         @default("pending")
  errorMessage    String?
  translatedUrl   String?
  costData        String?        @default("{}")
  usedPrompt      Boolean       @default(false)
  usedKnowledgeBase Boolean     @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  userId          String
  user            User           @relation(fields: [userId], references: [id])
  knowledgeBaseId String?
  knowledgeBase   KnowledgeBase? @relation(fields: [knowledgeBaseId], references: [id])
  promptId        String?
  prompt          Prompt?        @relation(fields: [promptId], references: [id])
  translationMetadata String?    @default("{}")
  plainTextContent String?
  threadId        String?        // ID do thread do Assistant
  runId           String?        // ID do run do Assistant
  assistantId     String?        @default("")
  shares          TranslationShare[]
}

model KnowledgeBase {
  id             String        @id @default(cuid())
  name           String
  description    String
  fileName       String        // Nome dos arquivos separados por vírgula
  filePath       String        // Sempre será 'vector_store'
  fileSize       Int          // Soma do tamanho dos arquivos
  fileType       String        // Tipos dos arquivos separados por vírgula
  vectorStoreId  String?      // ID da Vector Store na OpenAI
  fileIds        String[]     // Array de IDs dos arquivos na OpenAI
  fileMetadata   String?      @default("[]") // JSON com metadados dos arquivos (idiomas, etc)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  translations   Translation[]
  isPublic       Boolean       @default(false)

  @@index([userId])
}

model Prompt {
  id           String        @id @default(uuid())
  name         String
  description  String
  content      String        @db.Text
  instructions String        @db.Text
  tags         String[]      @default([])
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  translations Translation[]
  isPublic     Boolean       @default(false)
  model        String        @default("gpt-4-turbo-preview")
  temperature  Float         @default(0.3)
  assistantId  String?       // ID do assistant na OpenAI
  status       String        @default("pending") // pending, active, error

  @@index([userId])
}

model TranslationShare {
  id            String      @id @default(cuid())
  translationId String
  translation   Translation @relation(fields: [translationId], references: [id])
  sharedWithId  String      // ID do usuário com quem foi compartilhado
  sharedWith    User        @relation("shared_with", fields: [sharedWithId], references: [id])
  sharedById    String      // ID do usuário que compartilhou
  sharedBy      User        @relation("shared_by", fields: [sharedById], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([translationId, sharedWithId])
  @@index([sharedWithId])
  @@index([sharedById])
}
