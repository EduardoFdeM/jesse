// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String
  email          String          @unique
  password       String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  translations   Translation[]
  knowledgeBases KnowledgeBase[]
  prompts        Prompt[]
}

model Translation {
  id              String         @id @default(cuid())
  fileName        String
  filePath        String
  fileSize        Int
  fileType        String
  originalName    String         @default("")
  sourceLanguage  String
  targetLanguage  String
  status          String         @default("pending")
  errorMessage    String?
  translatedUrl   String?
  costData        String?        @default("{}")
  usedPrompt      Boolean       @default(false)
  usedKnowledgeBase Boolean     @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  userId          String
  user            User           @relation(fields: [userId], references: [id])
  knowledgeBaseId String?
  knowledgeBase   KnowledgeBase? @relation(fields: [knowledgeBaseId], references: [id])
  promptId        String?
  prompt          Prompt?        @relation(fields: [promptId], references: [id])
  translationMetadata String?    @default("{}")
  plainTextContent String?
}

model KnowledgeBase {
  id             String        @id @default(cuid())
  name           String
  description    String
  fileName       String
  filePath       String
  fileSize       Int
  fileType       String
  sourceLanguage String
  targetLanguage String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  translations   Translation[]
  chunks         KnowledgeBaseChunk[]
}

model Prompt {
  id           String          @id @default(uuid())
  name         String
  description  String
  content      String          @db.Text
  tags         String[]        @default([])
  version      String          @default("1.0.0")
  userId       String
  user         User            @relation(fields: [userId], references: [id])
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  translations Translation[]
  versions     PromptVersion[] @relation("PromptVersions")

  @@index([userId])
}

model PromptVersion {
  id          String   @id @default(cuid())
  version     String
  content     String   @db.Text
  description String?
  tags        String[]
  createdAt   DateTime @default(now())
  promptId    String
  prompt      Prompt   @relation("PromptVersions", fields: [promptId], references: [id])
  userId      String

  @@index([promptId])
  @@index([userId])
}

model KnowledgeBaseChunk {
  id              String       @id @default(cuid())
  content         String       @db.Text
  knowledgeBaseId String
  knowledgeBase   KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([knowledgeBaseId])
}
